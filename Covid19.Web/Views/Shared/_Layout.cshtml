<!doctype html>
<html lang="pt-br">
<head>
    <title>@ViewBag.Title</title>
    <meta name="description" content="Dashboard sobre os infectados do coronavírus no Brasil">
    <meta name="keywords" content="Covid19,covid-19,coronavirus,coronavírus,quarentena,pandemia,fiqueemcasa">
    <meta name="author" content="Thiago de Melo Lima">
    <link rel="icon" type="image/x-icon" href="~/Imagens/banner04.png" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link href="https://stackpath.bootstrapcdn.com/" rel="preconnect">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <link rel="stylesheet" href="~/Content/Covid.css" />
    @Styles.Render("~/Content/css")
</head>
<body>
    @{ int contadorDeNoticias = 0;}
    <header>
        <nav class="site-header fixed-top py-1" id="navbar-example2">
            <div class="container d-flex flex-column flex-md-row justify-content-between">
                <a class="py-2" href="https://remediosdemaispodcast.com.br/" data-toggle="tooltip" data-placement="right" data-html="true" title="<em>Solidariedade em tempos de </em> <strong>caos</strong>">
                    <img src="~/Imagens/banner01.png" width="30" height="30" alt="" class="rounded-circle">
                    Covid-19 For Help
                </a>
                <a class="py-2 d-none d-md-inline-block" href="#one" data-toggle="tooltip" data-placement="right" data-html="true" title="<em>Página inicial</em>">
                    <svg class="bi bi-house" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M2 13.5V7h1v6.5a.5.5 0 00.5.5h9a.5.5 0 00.5-.5V7h1v6.5a1.5 1.5 0 01-1.5 1.5h-9A1.5 1.5 0 012 13.5zm11-11V6l-2-2V2.5a.5.5 0 01.5-.5h1a.5.5 0 01.5.5z" clip-rule="evenodd" />
                        <path fill-rule="evenodd" d="M7.293 1.5a1 1 0 011.414 0l6.647 6.646a.5.5 0 01-.708.708L8 2.207 1.354 8.854a.5.5 0 11-.708-.708L7.293 1.5z" clip-rule="evenodd" />
                    </svg>
                </a>
                <a class="py-2 d-none d-md-inline-block" href="#graphQL" data-toggle="tooltip" data-placement="right" data-html="true" title="<em>Vá direto para os</em><b> gráficos</b>">
                    <svg class="bi bi-graph-up" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path d="M0 0h1v16H0V0zm1 15h15v1H1v-1z" />
                        <path fill-rule="evenodd" d="M14.39 4.312L10.041 9.75 7 6.707l-3.646 3.647-.708-.708L7 5.293 9.959 8.25l3.65-4.563.781.624z" clip-rule="evenodd" />
                        <path fill-rule="evenodd" d="M10 3.5a.5.5 0 01.5-.5h4a.5.5 0 01.5.5v4a.5.5 0 01-1 0V4h-3.5a.5.5 0 01-.5-.5z" clip-rule="evenodd" />
                    </svg>
                </a>
                <a class="py-2 d-none d-md-inline-block" href="#two" data-toggle="tooltip" data-placement="right" data-html="true" title="<em>Notícias sem</em><b> fake news</b>">
                    <svg class="bi bi-file-text" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M4 1h8a2 2 0 012 2v10a2 2 0 01-2 2H4a2 2 0 01-2-2V3a2 2 0 012-2zm0 1a1 1 0 00-1 1v10a1 1 0 001 1h8a1 1 0 001-1V3a1 1 0 00-1-1H4z" clip-rule="evenodd" />
                        <path fill-rule="evenodd" d="M4.5 10.5A.5.5 0 015 10h3a.5.5 0 010 1H5a.5.5 0 01-.5-.5zm0-2A.5.5 0 015 8h6a.5.5 0 010 1H5a.5.5 0 01-.5-.5zm0-2A.5.5 0 015 6h6a.5.5 0 010 1H5a.5.5 0 01-.5-.5zm0-2A.5.5 0 015 4h6a.5.5 0 010 1H5a.5.5 0 01-.5-.5z" clip-rule="evenodd" />
                    </svg>
                    <span class="badge badge-light">
                        @if (Enumerable.Count(ViewBag.ListaNoticias) > 0)
                        {
                            contadorDeNoticias = Enumerable.Count(ViewBag.ListaNoticias);
                        }
                        @contadorDeNoticias.ToString()
                    </span>
                    <span class="sr-only">notícias não lidas</span>
                </a>
                <a class="py-2 d-none d-md-inline-block invisible" href="#tree">Serviços Gratuitos</a>
                <a class="py-2 d-none d-md-inline-block" href="#four" data-toggle="modal" data-target="#staticBackdrop">
                    <svg class="bi bi-envelope" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M14 3H2a1 1 0 00-1 1v8a1 1 0 001 1h12a1 1 0 001-1V4a1 1 0 00-1-1zM2 2a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V4a2 2 0 00-2-2H2z" clip-rule="evenodd" />
                        <path fill-rule="evenodd" d="M.071 4.243a.5.5 0 01.686-.172L8 8.417l7.243-4.346a.5.5 0 01.514.858L8 9.583.243 4.93a.5.5 0 01-.172-.686z" clip-rule="evenodd" />
                        <path d="M6.752 8.932l.432-.252-.504-.864-.432.252.504.864zm-6 3.5l6-3.5-.504-.864-6 3.5.504.864zm8.496-3.5l-.432-.252.504-.864.432.252-.504.864zm6 3.5l-6-3.5.504-.864 6 3.5-.504.864z" />
                    </svg> Pedir ajuda
                </a>
                <a class="py-2 d-none d-md-inline-block" href="#five" data-toggle="modal" data-target="#myModal">
                    <svg class="bi bi-person-lines-fill" width="2em" height="2em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M1 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H1zm5-6a3 3 0 100-6 3 3 0 000 6zm7 1.5a.5.5 0 01.5-.5h2a.5.5 0 010 1h-2a.5.5 0 01-.5-.5zm-2-3a.5.5 0 01.5-.5h4a.5.5 0 010 1h-4a.5.5 0 01-.5-.5zm0-3a.5.5 0 01.5-.5h4a.5.5 0 010 1h-4a.5.5 0 01-.5-.5zm2 9a.5.5 0 01.5-.5h2a.5.5 0 010 1h-2a.5.5 0 01-.5-.5z" clip-rule="evenodd" />
                    </svg> Ajudar pessoas
                </a>
            </div>
        </nav>
    </header>
    <div class="container" id="MinhaCaixa">
        <div data-spy="scroll" data-target="#navbar-example2" data-offset="0">
            <h4 id="one" class="invisible"></h4>
            <div class="col-md-12">
                <div id="typed-strings0">
                    <h1>Progresso do <b class="font-weight-bolder text-danger">CORONAVÍRUS</b> no <span class="text-success">Brasil</span></h1>
                </div>
                <h1 class="text-center text-monospace" id="topoTitulo"></h1>
                <div class="tab-content" id="pills-tabContent">
                    <div class="tab-pane fade show active" id="pills-home" role="tabpanel" aria-labelledby="pills-home-tab">
                        @RenderBody()
                        <hr />
                    </div>
                </div>
                @{ Html.RenderPartial("_Rodape"); }
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>
    <script async src="https://cdn.jsdelivr.net/npm/typed.js@2.0.11"></script>


    <script async src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>

    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript" src="https://www.google.com/jsapi"></script>

    <script async src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>



    <script>
        document.onreadystatechange = function () {
            if (document.readyState == "loading") {
                console.log(document.readyState + ": agora estamos carregando o html5!");

            }
            if (document.readyState == "interactive") {
                console.log(document.readyState + ": agora estamos carregando css3, js e boostrap!");

            } else if (document.readyState === "complete") {
                console.log(document.readyState + ": agora a página está quase lá, falta os gráficos!");

            }
        }</script>
    <script async>


    jQuery(document).ready(function () {
        Carregartooltips();

        google.charts.load('current', {
            callback: function () {
                drawGraph();
                drawChartDonout();
                drawChartDonoutMortos();
                drawChartDonoutEstados();
            },
            packages: ['corechart', 'line', 'bar']
        });

        var typed = new Typed("#topoTitulo", {
            stringsElement: '#typed-strings0',
            typeSpeed: 50,
            backSpeed: 0,
            backDelay: 500,
            startDelay: 1000,
            loop: false,
            cursorChar: '_',
            cursorShow: false,
            onComplete: function (self) { console.log('onCmplete: título finish' + self) }
            //onBegin: function (self) { prettyLog('onBegin ' + self) },
            //onComplete: function (self) { prettyLog('onCmplete ' + self) },
            //preStringTyped: function (pos, self) { prettyLog('preStringTyped ' + pos + ' ' + self); },
            //onStringTyped: function (pos, self) { prettyLog('onStringTyped ' + pos + ' ' + self) },
            //onLastStringBackspaced: function (self) { prettyLog('onLastStringBackspaced ' + self) },
            //onTypingPaused: function (pos, self) { prettyLog('onTypingPaused ' + pos + ' ' + self) },
            //onTypingResumed: function (pos, self) { prettyLog('onTypingResumed ' + pos + ' ' + self) },
            //onReset: function (self) { prettyLog('onReset ' + self) },
            //onStop: function (pos, self) { prettyLog('onStop ' + pos + ' ' + self) },
            //onStart: function (pos, self) { prettyLog('onStart ' + pos + ' ' + self) },
            //onDestroy: function (self) { prettyLog('onDestroy ' + self) }
        });

        var typed = new Typed('#titulo-casos', {
            strings: ['<h1>80% dos casos são leves</h1><p><blockquote>Com base em todos os 72.314 casos de COVID-19 confirmados, suspeitos e assintomáticos na China a partir de 11 de fevereiro, um artigo do CCDC chinês divulgado em 17 de fevereiro e publicado no <a href="http://weekly.chinacdc.cn/en/article/id/e53946e2-c6c4-41e9-9a9b-fea8db1a8f51">Chinese Journal of Epidemiology</a> descobriu que:</blockquote><ul><li><strong class="text-success">80,9% das infecções são leves</strong> (com sintomas semelhantes aos da gripe) e podem se recuperar em casa.^1000\n</li><li><strong class="text-primary">13,8% são graves</strong>, desenvolvendo doenças graves, incluindo pneumonia e falta de ar.</li><li><strong class="text-danger">4,7% como crítico</strong> e pode incluir: insuficiência respiratória, choque séptico e falência de múltiplos órgãos.</li><li><mark>em cerca de 2% dos casos relatados, o vírus é fatal.</mark></li><li>Relativamente poucos casos são vistos entre <strong>crianças</strong>.</li><li>O risco de morte aumenta quanto mais   <button class="btn btn-dark" type="button" data-toggle="collapse" data-target=".multi-collapse2" aria-expanded="false" aria-controls="multiCollapseExample3 multiCollapseExample4">velho</button> você é.</li><li>Condições médicas pré-existentes (comorbidades): <button class="btn btn-dark" type="button" data-toggle="collapse" data-target=".multi-collapse" aria-expanded="false" aria-controls="multiCollapseExample1 multiCollapseExample2">Doença cardiovascular, Diabetes, Doença respiratória crônica, Hipertensão e Câncer</button></li><li><button class="btn btn-dark" type="button" data-toggle="collapse" data-target=".multi-collapse3" aria-expanded="false" aria-controls="multiCollapseExample5 multiCollapseExample6">Taxa de mortalidade COVID-19 por sexo</button></li></ul></p>'],

            typeSpeed: 35,
            backSpeed: 0,
            fadeOut: true,

            startDelay: 5000,
            cursorChar: '_',
            cursorShow: false,
            loop: false,
            onComplete: function (self) { console.log('onCmplete: introdução finish' + self) }
        });




        console.log();
        console.log("Iniciando carregamento dos gráficos!");

        jQuery.get("/Home/GetDataGraficoCasosEstados/",
            function (ListaCovidData, status) {

                if (status == "success") {
                    console.log("iniciando gráficos de estados!");
                    drawChartDonoutEstados(ListaCovidData);
                }

            });

        jQuery.get("/Home/GetDataGraficoMortosEstados/",
            function (ListaCovidData, status) {

                if (status == "success") {
                    console.log("iniciando gráficos de mortos!");
                    drawChartDonoutMortos(ListaCovidData);
                }
            });

        function drawChartDonoutEstados(ListaCovidData) {

            if (ListaCovidData == null) return
            var elementId = 'donutchart_estados';

            var dataEstados = new google.visualization.DataTable();

            dataEstados.addColumn('string', 'Estado');
            dataEstados.addColumn('number', 'Casos');
            console.log("Lista count: " + ListaCovidData.length);

            for (var i = 0; i < ListaCovidData.length; i++) {
                if (ListaCovidData[i].Estado != null && ListaCovidData[i].Casos != null) {
                    var myVal = parseFloat($.trim(ListaCovidData[i].Casos));
                    console.log([$.trim(ListaCovidData[i].Estado), { v: myVal, f: myVal.toFixed() }]);
                    dataEstados.addRow([$.trim(ListaCovidData[i].Estado), { v: myVal, f: myVal.toFixed() }]);
                }
            }

            var options = {
                title: 'Infectados por estados',
                pieHole: 0.2,
                width: '100%',
                height: 400,
                legend: { position: 'right' },
                pieSliceText: 'percentage',
                slices: {
                    4: { offset: 0.2 },
                    12: { offset: 0.3 },
                    14: { offset: 0.4 },
                    15: { offset: 0.5 },
                }
            };

            var chart = new google.visualization.PieChart(document.getElementById(elementId));
            chart.draw(dataEstados, options);
            jQuery("#load_casos_estados").css("display", "none");
            console.log("gráfico de estados carregado!");
        }

        function drawChartDonoutMortos(ListaCovidData) {

            if (ListaCovidData == null) return
            var elementId = 'donutchart_mortos';

            var dataMortos = new google.visualization.DataTable();

            dataMortos.addColumn('string', 'Estados');
            dataMortos.addColumn('number', 'Mortos');
            console.log("Lista count: " + ListaCovidData.length);

            for (var i = 0; i < ListaCovidData.length; i++) {
                if (ListaCovidData[i].Estado != null && ListaCovidData[i].Mortos != null) {
                    var myVal = parseFloat($.trim(ListaCovidData[i].Mortos));
                    console.log([$.trim(ListaCovidData[i].Estado), { v: myVal, f: myVal.toFixed() }]);
                    dataMortos.addRow([$.trim(ListaCovidData[i].Estado), { v: myVal, f: myVal.toFixed() }]);
                }
            }

            var options = {
                width: 1000,
                height: 300,
                chart: {
                    title: 'Mortos',
                    subtitle: 'por estados'
                },
                series: {
                    0: { axis: 'distance' }, // Bind series 0 to an axis named 'distance'.
                    1: { axis: 'brightness' } // Bind series 1 to an axis named 'brightness'.
                },
                axes: {
                    y: {
                        distance: { label: 'Quantidade' }, // Left y-axis.
                        brightness: { side: 'right', label: 'apparent magnitude' } // Right y-axis.
                    }
                }
            };

            var chart = new google.charts.Bar(document.getElementById(elementId));
            chart.draw(dataMortos, google.charts.Bar.convertOptions(options));
            jQuery("#load_mortos_estados").css("display", "none");
            console.log("gráfico de mortos carregado!");
        }

        function drawChartDonout() {
                var data = google.visualization.arrayToDataTable([
                    ['Legendas', 'Casos'],
                    ['Infectados em tratamento', @ViewBag.CovidMesAtual.InfectadosEmTratamento],
                    ['Mortos', @ViewBag.CovidMesAtual.Mortos],
                    ['Infectados curados', @ViewBag.CovidMesAtual.InfectadosCurados]
                ]);

                var options = {
                    title: 'Casos somente nesse mês',
                    pieHole: 0.1,
                    width: '100%',
                    height: 400,
                    legend: { position: 'right' }
                };

                var chart = new google.visualization.PieChart(document.getElementById('donutchart_day'));
                chart.draw(data, options);
                jQuery("#load_grafico_dias").css("display", "none");

                console.log("gráficos 1: Carregado!");
        }

        jQuery.get("/Home/GetDataGraficoDias/",
            function (ListaCovidData, status) {

                if (status == "success") {
                    console.log("iniciando gráficos de linha!");
                    drawGraph(ListaCovidData);
                }
            });

        function drawGraph(ListaCovidData) {
            if (ListaCovidData == null) return
            var elementIdMensal = 'GraficoDeMeses';
            // Set chart options
            var optionsMensal = {
                chart: {
                    title: 'Progresso por meses, sobre os casos de COVID-19',
                    subtitle: 'Somente no Brasil',

                },
                width: 1000,
                height: 300,
                series: {
                    // Gives each series an axis name that matches the Y-axis below.
                    0: { axis: 'linha01' },
                    1: { axis: 'linha02' },
                    2: { axis: 'linha03' }
                },
                axes: {
                    // Adds labels to each axis; they don't have to match the axis names.
                    y: {
                        linha01: { label: 'Quantidade (Confirmados)' },
                        linha02: { label: 'Quantidade (Mortos)' },
                        linha03: { label: 'Quantidade (Curados)' },
                    },
                    h: {
                        curveType: 'function',
                        legend: { position: 'bottom' }
                    },
                    x: {
                        0: { side: 'bottom' }
                    }

                }

            };

            var dataMensal = new google.visualization.DataTable();

            dataMensal.addColumn('string', 'Meses');
            dataMensal.addColumn('number', 'Casos confirmados');
            dataMensal.addColumn('number', 'Mortos');
            dataMensal.addColumn('number', 'Infectados curados');

            for (var i = 0; i < ListaCovidData.ListaMes.length; i++) {
                dataMensal.addRow([ListaCovidData.ListaMes[i].Mes,
                ListaCovidData.ListaMes[i].CasosConfirmados,
                ListaCovidData.ListaMes[i].Mortos,
                ListaCovidData.ListaMes[i].InfectadosCurados]);
            }

            var viewMensal = new google.visualization.DataView(dataMensal);
            viewMensal.setColumns([0, 1,
                {
                    calc: "stringify",
                    sourceColumn: 1,
                    type: "string",
                    role: "annotation"
                },
                2,
                {
                    calc: "stringify",
                    sourceColumn: 2,
                    type: "string",
                    role: "annotation"
                }
            ]);

            var chartMensal = new google.charts.Line(document.getElementById(elementIdMensal));
            jQuery("#load_grafico_meses").css("display", "none");
            chartMensal.draw(dataMensal, google.charts.Line.convertOptions(optionsMensal));
            console.log("gráficos 2: Carregado!");
            console.log();
            console.log("Finalizando carregamento dos gráficos!");
            console.log();
            console.log("Página totalmente carregada!");
        }

        function Carregartooltips() {
            console.log("ativando tooltips");
            jQuery('[data-toggle="tooltip"]').tooltip();
            console.log("tooltips ativados");
        }




      var divElement = document.getElementById('viz1586263510113');
      var vizElement = divElement.getElementsByTagName('object')[0];
      if (divElement.offsetWidth > 800) {
        vizElement.style.width = '1100px';
        vizElement.style.height = '850px';
      } else if (divElement.offsetWidth > 500) {
        vizElement.style.width = '1100px';
        vizElement.style.height = '850px';
      } else {
        vizElement.style.width = '100%';
        vizElement.style.height = '950px';
      }
      var scriptElement = document.createElement('script');
      scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';
      vizElement.parentNode.insertBefore(scriptElement, vizElement);


        });
    </script>
</body>
</html>
